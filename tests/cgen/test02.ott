% Testing various list forms, mutual recursion and some forms from sail.ott

embed
{{ cgen
open Crowbar
open Test02

let termvar_gen = lazy (const "x")

let pair (g1 : 'a gen) (g2 : 'b gen) : ('a*'b) gen = map [ g1 ; g2 ] (fun x y -> (x,y))        


}}

% minimal
metavar termvar, x
 ::=     {{ ocaml string }} {{ cgen x_gen }}

indexvar index, i, j, n, m  ::= {{ ocaml int }}


grammar

p :: 'P_' ::=
  | x         :: :: var
  | ( p1 , p2 ) :: :: pair

pe :: 'PE_' ::=
  | p = e :: :: PE

e :: 'E_' ::=              
  | x            ::  :: var
  | ( e1 , .. , en ) :: :: tuple
  | lets x1 = e1 and .. and xn = en  in e :: :: lets
  | let pe in e :: :: let
  | match e with pe1 .. pen :: :: match
  | undef :: :: undef

prec :: '' ::=
   | infix :: :: Infix
   | infixl :: :: InfixL
   | infixr :: :: InfixR

id :: '' ::=
  {{ com Identifier }}
  | x                           :: :: id
  | ( deinfix x )                       :: D :: deIid {{ com remove infix status }}
  | bool      		   	 :: M :: bool {{ com built in type identifiers }} {{ ichlo (Id "bool") }}
  | bit				 :: M :: bit {{ ichlo (Id "bit") }}

